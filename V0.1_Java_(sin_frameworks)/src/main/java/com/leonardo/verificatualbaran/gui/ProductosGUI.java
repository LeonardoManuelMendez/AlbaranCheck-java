package com.leonardo.verificatualbaran.gui;

import com.leonardo.verificatualbaran.controlador.Controlador;
import com.leonardo.verificatualbaran.entidades.Producto;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author leonardo
 */
public class ProductosGUI extends javax.swing.JPanel {

    /**
     * Creates new form ProductosGUI
     */
    public ProductosGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        botonObtenerActualizar = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Borrar", "Actualizar" }));

        jLabel1.setText("Listado de Productos");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Nombre", "EAN Unidad", "EAN Bulto", "Acciones"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.setVisible(true);;

        botonObtenerActualizar.setText("Obtener o Actualizar Tabla");
        botonObtenerActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonObtenerActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonObtenerActualizar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(botonObtenerActualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonObtenerActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonObtenerActualizarActionPerformed
        List<Producto> listadoProductos = Controlador.obtenerListaProductos();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // Obtener el modelo de la tabla

        //ComboBox para las opciones de borrar y actualizar producto
        TableColumn accionesColumn = jTable1.getColumnModel().getColumn(4);
        accionesColumn.setCellEditor(new DefaultCellEditor(jComboBox1));

        // Insertar los datos en las celdas, agregando filas si es necesario
        for (int i = 0; i < listadoProductos.size(); i++) {
            Producto producto = listadoProductos.get(i);

            if (i >= jTable1.getRowCount()) {
                model.addRow(new Object[jTable1.getColumnCount()]); // Agregar una nueva fila vacía
            }

            jTable1.setValueAt(producto.getCodigo(), i, 0);
            jTable1.setValueAt(producto.getNombre(), i, 1);
            jTable1.setValueAt(producto.getEanProducto(), i, 2);
            jTable1.setValueAt(producto.getEanBulto(), i, 3);

            jComboBox1.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (jComboBox1.getSelectedItem() != null) {
                        String itemSeleccionado = (String) jComboBox1.getSelectedItem();
                        jComboBox1.setSelectedItem(null);  //para que no quede la celda con la selección del comboBox

                        //Buscar el id del producto en la linea donde está el comboBox que se clicke
                        int filaSeleccionada = jTable1.getSelectedRow() > 0 ? jTable1.getSelectedRow() : 0;

                        TableModel modelo = jTable1.getModel();
                        Object valorId = modelo.getValueAt(filaSeleccionada, 0);

                        if (itemSeleccionado.equals("Borrar")) {
                            Controlador.borrarLineadelTXT(listadoProductos, (String) valorId);
                            //}else if (itemSeleccionado.equals("Actualizar")) {
                            //   Controlador.actualizarLineadelTXT(itemSeleccionado, itemSeleccionado, itemSeleccionado);
                        }

                    }

                    // Insertar los datos en las celdas, agregando filas si es necesario
                    for (int i = 0; i < listadoProductos.size(); i++) {
                        Producto producto = listadoProductos.get(i);

                        jTable1.setValueAt(producto.getCodigo(), i, 0);
                        jTable1.setValueAt(producto.getNombre(), i, 1);
                        jTable1.setValueAt(producto.getEanProducto(), i, 2);
                        jTable1.setValueAt(producto.getEanBulto(), i, 3);

                    }
                    jTable1.revalidate();
                    jTable1.repaint();

                }

            });

        }


    }//GEN-LAST:event_botonObtenerActualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonObtenerActualizar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
